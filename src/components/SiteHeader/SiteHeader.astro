---
type NavigationItem = {
  title: string;
  path: `/${string}`;
};
export interface Props {
  root?: boolean;
  siteName: string;
  navItem: NavigationItem[];
}

const { root = false, siteName, navItem } = Astro.props as Props;
---

<header class="header" id="header">
  <div class="header-inner">
    {
      root ? (
        <h1 class="title">
          <a href="/">{siteName}</a>
        </h1>
      ) : (
        <div class="title">
          <a href="/">{siteName}</a>
        </div>
      )
    }
    <ul class="nav">
      {
        navItem.map((link) => {
          return (
            <li class="nav-item">
              <a href={link.path} aria-current={link.path === Astro.url.pathname ? 'page' : null}>
                {link.title}
              </a>
            </li>
          );
        })
      }
    </ul>
  </div>
</header>

<style lang="scss">
  :root {
    --l-header-height: 64px;
  }
  :target {
    scroll-margin-top: var(--l-header-height);
  }
  .header {
    position: fixed;
    top: 0;
    height: var(--l-header-height);
    width: 100%;
    color: var(--c-static-base-light);
    backdrop-filter: blur(3px);
    z-index: 1000;
  }
  .header::before {
    content: '';
    position: fixed;
    height: inherit;
    width: inherit;
    top: inherit;
    background-color: var(--c-static-base-dark);
    z-index: -1;
    opacity: 0.5;
  }
  .header-inner {
    display: flex;
    max-width: var(--content-max-size);
    margin: auto;
    height: 100%;
    align-items: center;
    justify-content: space-between;
  }
  .title {
    font-size: 1rem;
    font-weight: 700;
    margin: 0;
    letter-spacing: 0.05em;

    & > a {
      text-decoration: none;
      color: var(--c-static-light);
    }
  }
  .nav {
    list-style-type: none;
    display: flex;
    gap: 8px;
  }
  .nav-item {
    & > a {
      text-decoration: none;

      &:hover {
        text-decoration: underline;
      }
    }
  }

  [aria-current='page'] {
    color: var(--c-dark);
  }
</style>
